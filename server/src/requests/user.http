@jebeshToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtZ3VsZ3VtODAwMDE1M3cwN3llaWJmamkiLCJ1c2VybmFtZSI6ImplYmVzaCIsImlhdCI6MTc2MTcxNTA5MSwiZXhwIjoxNzYyMzE5ODkxfQ.Q0IqpQm4GacYPzPKxoyrL2yL5HpcBoXSF8-TsON0-s0
@sodaToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtZ3VsZzk1ZTAwMDA1M3cwdTdqcjZ2d28iLCJ1c2VybmFtZSI6Il9zb2RhIiwiaWF0IjoxNzYwNjkwMTQzLCJleHAiOjE3NjEyOTQ5NDN9.NDdsWLt0-qMPE9M5cU1tAhXzMaQ5XY9YvBAE8b7U5ho
@lemonToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtZ3VsaDVuZzAwMDI1M3cweHRobHFtaGsiLCJ1c2VybmFtZSI6ImxlbW9uMjIiLCJpYXQiOjE3NjA2OTAxODUsImV4cCI6MTc2MTI5NDk4NX0.s8T-G4jAodri1JDzKNxEvdJYsOsGVsy03TTE7NZB1Ks
@meopoToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtZ3hnemx1ODAwMDA1M2tzZGw3M2dueGkiLCJ1c2VybmFtZSI6Im1lb3BvNjM2IiwiaWF0IjoxNzYwODY0MDQ2LCJleHAiOjE3NjE0Njg4NDZ9.EB1CLa6Zg93cMCsem0AOSQM-0IGEwygJ0F60xc7iCb4

### Create user jebesh
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { user { name, username, email, id }, token } }",
  "variables": {
    "input": {
      "name": "Jebesh",
      "username": "jebesh",
      "email": "jebesh67@gmail.com",
      "password": "jebesh123"
    }
  }
}

### Create user soda
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { user { name, username, email, id }, token } }",
  "variables": {
    "input": {
      "name": "SodaPop",
      "username": "_soda",
      "email": "sodaeleven@gmail.com",
      "password": "soda123"
    }
  }
}

### Create user lemon
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { user { name, username, email, id }, token } }",
  "variables": {
    "input": {
      "name": "lemon",
      "username": "lemon22",
      "email": "lemon67@gmail.com",
      "password": "lemon123"
    }
  }
}

### Create user meopo
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { user { name, username, email, id }, token } }",
  "variables": {
    "input": {
      "name": "Meopo Jr",
      "username": "meopo636",
      "email": "meopo67@gmail.com",
      "password": "meopo123"
    }
  }
}


### Create new user with invaild email and password
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { user { name, username, email, id }, token } }",
  "variables": {
    "input": {
      "name": "lalala",
      "username": "jebesh",
      "email": "jebesh67mail.com",
      "password": "jebes"
    }
  }
}


### Login with valid user
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: LoginUserInput!) { loginUser(loginUserInput: $input) { user { name, username, id }, token } }",
  "variables": {
    "input": {
      "username": "jebesh",
      "password": "jebesh123"
    }
  }
}


### Login with invalid username
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: LoginUserInput!) { loginUser(loginUserInput: $input) { user { name, username, id }, token } }",
  "variables": {
    "input": {
      "username": "jebesh11",
      "password": "jebesh123"
    }
  }
}


### Login with wong password
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "mutation($input: LoginUserInput!) { loginUser(loginUserInput: $input) { user { name, username, id }, token } }",
  "variables": {
    "input": {
      "username": "jebesh",
      "password": "jebesh127773"
    }
  }
}


### Get other user
POST http://localhost:5000/graphql
Content-Type: application/json
Authorization: Bearer {{jebeshToken}}

{
  "query": "query($username: String!) { otherUserProfile(username: $username) { user { username, name, email, id, createdAt, updatedAt } } }",
  "variables": {
    "username": "_soda"
  }
}


### Get current user
POST http://localhost:5000/graphql
Content-Type: application/json
Authorization: Bearer {{jebeshToken}}

{
  "query": "query { currentUserProfile { user { username name email id createdAt updatedAt bio } } }"
}



### Get invalid user
POST http://localhost:5000/graphql
Content-Type: application/json
Authorization: Bearer {{jebeshToken}}

{
  "query": "query($username: String!) { otherUserProfile(username: $username) { user { username } } }",
  "variables": {
    "username": "jebeshasfsaf"
  }
}


### Get current user with wrong token
POST http://localhost:5000/graphql
Content-Type: application/json
Authorization: Bearer sagsdagasg

{
  "query": "query { currentUserProfile { user { username, id } } }"
}


### logout
POST http://localhost:5000/graphql
Content-Type: application/json
Authorization: Bearer {{jebeshToken}}

{
  "query": "query { logoutUser }"
}



### Check for existing username
POST http://localhost:5000/graphql
Content-Type: application/json

{
  "query": "query($input: UsernameInput!) { verifyUsername(input: $input) { username { isAvailable, message } } }",
  "variables": {
    "input": {
      "username": "_jebexhh"
    }
  }
}
